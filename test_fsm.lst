                  2   $LIST
0000              4   
0000              5   ;  N76E003 pinout:
0000              6   ;                               -------
0000              7   ;       PWM2/IC6/T0/AIN4/P0.5 -|1    20|- P0.4/AIN5/STADC/PWM3/IC3
0000              8   ;               TXD/AIN3/P0.6 -|2    19|- P0.3/PWM5/IC5/AIN6
0000              9   ;               RXD/AIN2/P0.7 -|3    18|- P0.2/ICPCK/OCDCK/RXD_1/[SCL]
0000             10   ;                    RST/P2.0 -|4    17|- P0.1/PWM4/IC4/MISO
0000             11   ;        INT0/OSCIN/AIN1/P3.0 -|5    16|- P0.0/PWM3/IC3/MOSI/T1
0000             12   ;              INT1/AIN0/P1.7 -|6    15|- P1.0/PWM2/IC2/SPCLK
0000             13   ;                         GND -|7    14|- P1.1/PWM1/IC1/AIN7/CLO
0000             14   ;[SDA]/TXD_1/ICPDA/OCDDA/P1.6 -|8    13|- P1.2/PWM0/IC0
0000             15   ;                         VDD -|9    12|- P1.3/SCL/[STADC]
0000             16   ;            PWM5/IC7/SS/P1.5 -|10   11|- P1.4/SDA/FB/PWM1
0000             17   ;                               -------
0000             18   ;
0000             19   ; 2 3 4 7 9 19 18 17 16 12 11 15 10 6 5 14 
0000             20   ;-------------------;
0000             21   ; Clock Frequencies ;
0000             22   ;-------------------;
0000             23   
0000             24   CLK               EQU 16600000 ; Microcontroller System Frequency in Hz
0000             25   BAUD              EQU 115200 ; Baud Rate for UART in BPS
0000             26   
0000             27   TIMER0_RATE   EQU 4096     ; 2048Hz Squarewave (Peak Amplitude of CEM-1203 Speaker)
0000             28   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
0000             29   
0000             30   TIMER1_RELOAD     EQU (0X100 - (CLK / (16 * BAUD)))
0000             31   
0000             32   TIMER2_RATE       EQU 1000     ; 1000Hz, for a timer tick of 1ms
0000             33   TIMER2_RELOAD     EQU ((65536- (CLK/TIMER2_RATE)))
0000             34   
0000             35   ;-------------------;
0000             36   ;- Pin Definitions -;
0000             37   ;-------------------;
0000             38   
0000             39   ; ToDo : Button Multiplexer
0000             40   START_BUTTON       EQU P0.4 ; Pin 20
0000             41   MODE_BUTTON       EQU P1.0 ; Pin 15
0000             42   
0000             43   TENS_BUTTON       EQU P1.2 ; Pin 13
0000             44   ONES_BUTTON       EQU P1.6 ; Pin 8 
0000             45   
0000             46   OUTPUT_PIN             EQU P1.5 ; Pin 10
0000             47   
0000             48   REF_ADC           EQU P1.7 ; Pin 6
0000             49   LM335_ADC                  EQU P3.0 ; Pin 5
0000             50   SPEAKER_OUT       EQU P0.5 ; Pin 1
0000             51   THERMOCOUPLE_ADC  EQU P1.1 ; Pin 14
0000             52   
0000             53   ; Reset vector
0000             54   ORG 0x0000
0000 020932      55       LJMP Main
0003             56   
0003             57   ; External interrupt 0 vector (not used in this code)
0003             58   ORG 0x0003
0003 32          59            RETI
0004             60   
0004             61   ; Timer/Counter 0 overflow interrupt vector
000B             62   ORG 0x000B
000B 020733      63            ljmp Timer0_ISR
000E             64   
000E             65   ; External interrupt 1 vector (not used in this code)
0013             66   ORG 0x0013
0013 32          67            RETI
0014             68   
0014             69   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             70   ORG 0x001B
001B 32          71            RETI
001C             72   
001C             73   ; Serial port receive/transmit interrupt vector (not used in this code)
0023             74   ORG 0x0023
0023 32          75            RETI
0024             76   
0024             77   ; Timer/Counter 2 overflow interrupt vector
002B             78   ORG 0x002B
002B 020753      79            LJMP Timer2_ISR
002E             80   
0030             81   DSEG AT 0x30
0030             82   
0030             83   STATE_NUM:                 DS 1 ;
0031             84   
0031             85   Count1ms:             DS 2 ; Used to Determine When 1s Has Passed
0033             86   speaker_counter1ms:    ds 2
0035             87   speaker_counts:            ds 1 ;
0036             88   
0036             89   BCD_Counter:          DS 1 ; The BCD counter incremented in the ISR and displayed in the main loop
0037             90   Current_Counter:           DS 1 ;
0038             91   Resulting_Counter:         DS 1 ;
0039             92   
0039             93   Timer_State:          DS 1 ;
003A             94   Beep_Count:                        DS 1 ;
003B             95   Desired_PWM:               DS 2 ;
003D             96   
003D             97   ;------------------------;
003D             98   ;   Temperature Values   ;
003D             99   ;------------------------;
003D            100   
003D            101   TEMP_ERROR: DS 1
003E            102   TEMP_SOAK:  DS 1
003F            103   TEMP_REFLOW: DS 1
0040            104   
0040            105   TEMP_DONE EQU 60
0040            106   
0040            107   TX_SIZE  EQU 5 ; Size of the Transmit Buffer
0040            108   TX_BUFF: DS TX_SIZE ; Buffer for Transmit Characters
0045            109   
0045            110   X:   DS 4
0049            111   Y:   DS 4
004D            112   BCD: DS 5
0052            113   
0052            114   OVEN_BCD: DS 2
0054            115   
0054            116   VLED_ADC: DS 2
0056            117   
0056            118   LM335_TEMP: DS 2 ; 2 Byte Temperature Value With 0.01 Degree Resolution
0058            119   THERMOCOUPLE_TEMP: DS 2 ; 2 Byte Temperature Value With 0.01 Degree Resolution
005A            120   OVEN_TEMP: DS 1 ; 1 Byte Temperature Value With 1 Degree Resolution
005B            121   
0000            122   BSEG
0000            123   MF: DBIT 1
0001            124   
0001            125   Below_Temp_Flag: DBIT 1
0002            126   Error_Triggered_Flag: DBIT 1
0003            127   
0003            128   Speaker_En_Flag:   DBIT 1
0004            129   
0110             64   $LIST
                546   $LIST
0574            253   $LIST
059A             37   $LIST
                136   $LIST
0603            138   
0603 546F3D20   139   Initial_Message1:  db 'To= xxC  Tj=xxC ', 0
     78784320
     20546A3D
     78784320
     00
0614 73787878   140   Initial_Message2:  db 'sxxx.00 rxxx.00 ', 0
     2E303020
     72787878
     2E303020
     00
0625            141   
0625            142   CSEG
0625            143   
0625            144   LCD_RS EQU P1.3 ; Pin 12
0625            145   LCD_E  EQU P1.4 ; Pin 11
0625            146   LCD_D4 EQU P0.0 ; Pin 16
0625            147   LCD_D5 EQU P0.1 ; Pin 15
0625            148   LCD_D6 EQU P0.2 ; Pin 18
0625            149   LCD_D7 EQU P0.3 ; Pin 19
0625            150   
0625            151   Speaker:
0625            152   ; Increment 16-bit 1ms Counter.
0625 0533       153            INC speaker_counter1ms+0 ; Increment Low 8-bits
0627 E533       154            MOV a, speaker_counter1ms+0 ; Increment High 8-bits if Lower 8-bits Overflow
0629 7002       155            JNZ Dont_Increment_Byte1
062B 0534       156            INC speaker_counter1ms+1
062D            157   Dont_Increment_Byte1:
062D            158            ; Check If oNE Second Has Passed
062D E533       159            MOV A, speaker_counter1ms+0
062F B4F418     160            CJNE A, #LOW(500), return_speaker
0632 E534       161            MOV A, speaker_counter1ms+1
0634 B40113     162            CJNE A, #HIGH(500), return_speaker
0637            163   
0637 E4         164            CLR A
0638 F533       165            MOV speaker_counter1ms+0, A
063A F534       166            MOV speaker_counter1ms+1, A
063C            167   
063C B203       168            cpl Speaker_En_Flag
063E 0535       169            inc speaker_counts
0640            170   
0640 E535       171            mov a, speaker_counts
0642 B40405     172            cjne a, #0x04, return_speaker
0645 753500     173            mov speaker_counts, #0x00
0648 C203       174            clr Speaker_En_Flag
064A            175   return_speaker:
064A 22         176            ret
064B            177   
064B            178   Display_LCD:
064B C0E0       179            push acc
064D 7401       179            mov a, #1
064F 14         179            dec a
0650 1200C7     179            lcall ?Set_Cursor_1 ; Select column and row
0653 D0E0       179            pop acc
0655 C000       180            push ar0
0657 A830       180            mov r0, STATE_NUM
0659 1200CC     180            lcall ?Display_BCD
065C D000       180            pop ar0
065E 12047D     181            lcall Display_LM335_Temperature
0661 120494     182            lcall Display_Oven_Temperature
0664 1204ED     183            lcall Display_Reflow_Temperature
0667 1204C1     184            lcall Display_Soak_Temperature
066A            185   
066A 22         186            RET
066B            187   
066B            188   Display_LCDTest:
066B 12047D     189            lcall Display_LM335_Temperature
066E 120494     190            lcall Display_Oven_Temperature
0671            191   
0671 C0E0       192            push acc
0673 7401       192            mov a, #1
0675 14         192            dec a
0676 1200C7     192            lcall ?Set_Cursor_1 ; Select column and row
0679 D0E0       192            pop acc
067B C000       193            push ar0
067D A830       193            mov r0, STATE_NUM
067F 1200CC     193            lcall ?Display_BCD
0682 D000       193            pop ar0
0684            194   
0684 C0E0       195            push acc
0686 7401       195            mov a, #1
0688 14         195            dec a
0689 1200C5     195            lcall ?Set_Cursor_2 ; Select column and row
068C D0E0       195            pop acc
068E C000       196            push ar0
0690 A836       196            mov r0, BCD_Counter
0692 1200CC     196            lcall ?Display_BCD
0695 D000       196            pop ar0
0697 C0E0       197            push acc
0699 7405       197            mov a, #5
069B 14         197            dec a
069C 1200C5     197            lcall ?Set_Cursor_2 ; Select column and row
069F D0E0       197            pop acc
06A1 C000       198            push ar0
06A3 A838       198            mov r0, Resulting_Counter
06A5 1200CC     198            lcall ?Display_BCD
06A8 D000       198            pop ar0
06AA            199   
06AA 1205E0     200            lcall Display_SpeakerFlag
06AD 12059A     201            lcall Display_BelowFlag
06B0            202   
06B0 22         203            RET
06B1            204   
06B1            205   Check_Buttons:
06B1 20921B     206            jb TENS_BUTTON, onesbutton
06B4 1207AA     207            lcall Wait30ms
06B7 209215     208            jb TENS_BUTTON, onesbutton
06BA            209   
06BA 3092FD     210            jnb TENS_BUTTON, $
06BD 309009     211            jnb MODE_BUTTON, reflowaddten; if MODE BUTTON IS PRESSED, jump
06C0 E53E       212            mov a, TEMP_SOAK
06C2 240A       213            add a, #0x0A
06C4 F53E       214            mov TEMP_SOAK, a
06C6 0206CF     215            ljmp onesbutton
06C9            216   reflowaddten:
06C9 E53F       217            mov a, TEMP_REFLOW
06CB 240A       218            add a, #0x0A
06CD F53F       219            mov TEMP_REFLOW, a
06CF            220   onesbutton:
06CF 20961B     221            jb ONES_BUTTON, done_check_button
06D2 1207AA     222            lcall Wait30ms
06D5 209615     223            jb ONES_BUTTON, done_check_button
06D8            224   
06D8 3096FD     225            jnb ONES_BUTTON, $
06DB 309009     226            jnb MODE_BUTTON, reflowaddone; if MODE BUTTON IS PRESSED, jump
06DE E53E       227            mov a, TEMP_SOAK
06E0 2401       228            add a, #0x01
06E2 F53E       229            mov TEMP_SOAK, a
06E4 0206ED     230            ljmp done_check_button
06E7            231   reflowaddone:
06E7 E53F       232            mov a, TEMP_REFLOW
06E9 2401       233            add a, #0x01
06EB F53F       234            mov TEMP_REFLOW, a
06ED            235   done_check_button:
06ED E53F       236            mov a, TEMP_REFLOW
06EF 953E       237            subb a, TEMP_SOAK ; if REFLOW - SOAK = + we good
06F1 5004       238            jnc done_reflow_and_soak_temp_check ; 
06F3 E53F       239            mov a, TEMP_REFLOW
06F5 F53E       240            mov TEMP_SOAK, a
06F7            241   done_reflow_and_soak_temp_check:         
06F7 22         242            ret
06F8            243   
06F8            244   Init_Vars:
06F8            245       ; Initial Values at State 0
06F8 753000     246            MOV STATE_NUM, #0x00
06FB            247   
06FB 753D32     248            MOV TEMP_ERROR, #50
06FE 753E91     249            MOV TEMP_SOAK, #145
0701 753FD9     250            MOV TEMP_REFLOW, #217
0704            251   
0704 755400     252            MOV VLED_ADC+0, #0
0707 755500     253            MOV VLED_ADC+1, #0
070A            254   
070A 755600     255            MOV LM335_TEMP+0, #0
070D 755700     256            MOV LM335_TEMP+1, #0
0710            257   
0710 755800     258            MOV THERMOCOUPLE_TEMP+0, #0
0713 755900     259            MOV THERMOCOUPLE_TEMP+1, #0
0716            260   Reset_Vars:
0716 753600     261            MOV BCD_Counter, #0x00
0719 753800     262            MOV Resulting_Counter, #0x00
071C 753B00     263       MOV Desired_PWM+0, #0x00
071F 753C00     264       MOV Desired_PWM+1, #0x00
0722            265   
0722 D295       266       SETB OUTPUT_PIN
0724 D284       267            SETB START_BUTTON
0726 D292       268            setb TENS_BUTTON
0728 D296       269            setb ONES_BUTTON
072A D290       270            setb MODE_BUTTON
072C C203       271            clr Speaker_En_Flag
072E C201       272            CLR Below_Temp_Flag
0730 C202       273            CLR Error_Triggered_Flag
0732            274   
0732 22         275            RET
0733            276   
0733            277   Timer0_ISR:
0733            278            ; Save Registers to Stack.
0733 C0E0       279       PUSH ACC
0735 C0D0       280            PUSH PSW
0737            281   
0737 30030E     282            JNB Speaker_En_Flag, No_Sound
073A            283   Generate_Sound:
073A C28C       284            CLR TR0 ; Stop Timer 0.
073C            285            ; Timer 0 Doesn't Have 16-Bit Auto-Reload.
073C 758CF0     286            MOV TH0, #HIGH(TIMER0_RELOAD)
073F 758A2C     287            MOV TL0, #LOW(TIMER0_RELOAD)
0742 D28C       288            SETB TR0
0744            289   
0744 B285       290            CPL SPEAKER_OUT ; Toggle the Alarm Out Pin
0746 8006       291            SJMP Timer0_ISR_Done
0748            292   No_Sound:
0748            293            ; Timer 0 Doesn't Have 16-Bit Auto-Reload.
0748 758CF0     294            MOV TH0, #HIGH(TIMER0_RELOAD)
074B 758A2C     295            MOV TL0, #LOW(TIMER0_RELOAD)
074E            296   Timer0_ISR_Done:
074E            297            ; Restore Registers from Stack.
074E D0D0       298            POP PSW
0750 D0E0       299            POP ACC
0752            300   
0752 32         301            RETI
0753            302   ;-------------;
0753            303   ; Timer 2 ISR ;
0753            304   ;-------------;
0753            305   
0753            306   Timer2_ISR:
0753 C2CF       307            CLR TF2  ; Timer 2 Doesn't Clear TF2 Automatically. Do it in the ISR.  It is Bit Addressable.
0755            308   
0755            309            ; Save Registers to Stack
0755 C0E0       310            PUSH ACC
0757 C0D0       311            PUSH PSW
0759            312   
0759            313            ; Increment 16-bit 1ms Counter.
0759 0531       314            INC Count1ms+0 ; Increment Low 8-bits
075B E531       315            MOV a, Count1ms+0 ; Increment High 8-bits if Lower 8-bits Overflow
075D 7002       316            JNZ Inc_Done
075F 0532       317            INC Count1ms+1
0761            318   Inc_Done:
0761            319            ;lcall Speaker
0761 E539       320            MOV A, Timer_State
0763 B40103     321            CJNE A, #0x01, Continue ; Jump If Not In Timer State
0766 120574     322            LCALL Inc_PWM
0769            323   Continue:
0769            324            ; Check If oNE Second Has Passed
0769 E531       325            MOV A, Count1ms+0
076B B4E837     326            CJNE A, #LOW(1000), Timer2_ISR_Done
076E E532       327            MOV A, Count1ms+1
0770 B40332     328            CJNE A, #HIGH(1000), Timer2_ISR_Done
0773            329   
0773 120519     330            LCALL TX_Temp_Oven
0776 E4         331            CLR A
0777 F531       332            MOV Count1ms+0, A
0779 F532       333            MOV Count1ms+1, A
077B            334            ; Increment the BCD counter
077B E536       335            MOV A, BCD_Counter
077D 2401       336            ADD A, #0x01
077F D4         337            DA A
0780 F536       338            MOV BCD_Counter, A
0782            339   
0782            340   
0782 F536       341       MOV BCD_Counter, A
0784 B5381E     342            CJNE A, Resulting_Counter, Timer2_ISR_Done ; Skip if BCD_Counter != Resulting_Counter
0787 E539       343            MOV A, Timer_State
0789 B40119     344       CJNE A, #0x01, Timer2_ISR_Done; Skip If We're Not In Timer State
078C            345   
078C E530       346            MOV A, STATE_NUM
078E B4010F     347            CJNE A, #0x01, OtherStates ; Skip If Not State 1
0791            348   
0791            349   Check_Error_State:
0791            350            ; Check If Oven Temperature < 50
0791 120564     351            LCALL Check_Temp_Error
0794 30020E     352            JNB Error_Triggered_Flag, Timer2_ISR_Done ; Skip If Oven Temperature <= 50      
0797            353   Error_State_Triggered:
0797            354            ;CLR Error_Triggered_Flag
0797 753000     355            MOV STATE_NUM, #0x00
079A 753600     356            MOV BCD_Counter, #0x00
079D            357   
079D 0207A5     358            LJMP Timer2_ISR_Done
07A0            359   OtherStates:
07A0 753600     360            MOV BCD_Counter, #0x00
07A3 0530       361            INC STATE_NUM ; Increment State Number
07A5            362   Timer2_ISR_Done:
07A5 D0D0       363            POP PSW
07A7 D0E0       364            POP ACC
07A9 32         365            RETI
07AA            366   
07AA            367   
07AA            368   
07AA            369   Wait30ms:
07AA 7A06       370       MOV R2, #6
07AC 79C8       371   W3: MOV R1, #200
07AE 7868       372   W2: MOV R0, #104
07B0 D8FE       373   W1: djnz R0, W1 ; 4 cycles-> 4 * 60.285ns * 104 = 25us
07B2 D9FA       374       djnz R1, W2 ; 25us * 200 = 5.0ms
07B4 DAF6       375       djnz R2, W3 ; 5.0ms * 6 = 50ms (Approximately)
07B6 22         376       RET
07B7            377   
07B7            378   StateChanges: ; Check What Counter Number Will Be For Each State
07B7 E530       379            MOV A, STATE_NUM
07B9 B40006     380            CJNE A, #0x00, Next1 ; Jump to Next1 if STATE_NUM is NOT 0
07BC            381   
07BC 1207F5     382            LCALL State0
07BF 0207F4     383            LJMP Done_State_Counter
07C2            384   Next1:
07C2 E530       385            MOV A, STATE_NUM
07C4 B40106     386            CJNE A, #0x01, Next2 ; Jump to Next2 if STATE_NUM is NOT 1
07C7            387   
07C7 120812     388            LCALL State1
07CA 0207F4     389            LJMP Done_State_Counter
07CD            390   Next2:
07CD E530       391            MOV A, STATE_NUM
07CF B40206     392            CJNE A, #0x02, Next3 ; Jump to Next3 if STATE_NUM is NOT 2
07D2            393   
07D2 12082B     394            LCALL State2
07D5 0207F4     395            LJMP Done_State_Counter
07D8            396   Next3:
07D8 E530       397            MOV a, STATE_NUM
07DA B40306     398            CJNE a, #0x03, Next4 ; Jump to Next4 if STATE_NUM is NOT 3
07DD            399   
07DD 120843     400            LCALL State3
07E0 0207F4     401            LJMP Done_State_Counter
07E3            402   Next4:
07E3 E530       403            MOV A, STATE_NUM
07E5 B40406     404            CJNE A, #0x04, Next5 ; Jump to Next5 if STATE_NUM is NOT 4
07E8            405   
07E8 12085F     406            LCALL State4
07EB 0207F4     407            LJMP Done_State_Counter
07EE            408   Next5:
07EE 120866     409            LCALL State5
07F1 0207F4     410            LJMP Done_State_Counter
07F4            411   
07F4            412   Done_State_Counter:
07F4 22         413            RET
07F5            414   
07F5            415   State0:
07F5 753900     416       MOV Timer_State, #0x00
07F8 12058D     417       LCALL Power0
07FB            418            ; LCALL Check_Buttons
07FB            419   
07FB 208413     420            JB START_BUTTON, Quit0 ; Go to Quit0 If Start Button is NOT Pressed
07FE 1207AA     421            LCALL Wait30ms
0801 20840D     422            JB START_BUTTON, Quit0
0804            423   
0804            424            
0804 3084FD     425            JNB START_BUTTON, $ ; Go to State1 If Start Button is Pressed
0807 753600     426            MOV BCD_Counter, #0x00
080A 753806     427            MOV Resulting_Counter, #0x06
080D 0530       428            INC STATE_NUM
080F D203       429            setb Speaker_En_Flag
0811            430   Quit0:
0811 22         431            RET
0812            432   
0812            433   State1:
0812 753901     434       MOV Timer_State, #0x01
0815 120590     435       LCALL Power100
0818            436            
0818 A93E       437            MOV R1, TEMP_SOAK
081A 120558     438            LCALL Check_Temp_Oven ; Check If Oven Temperature Reaches 150
081D 20010A     439            JB Below_Temp_Flag, Quit1 ; If Temperature Below then jump to quit1
0820            440   
0820            441            ;CLR Below_Temp_Flag
0820 753600     442            MOV BCD_Counter, #0x00
0823 753806     443            MOV Resulting_Counter, #0x06
0826 0530       444            INC STATE_NUM
0828 D203       445            setb Speaker_En_Flag
082A            446   Quit1:
082A 22         447            RET
082B            448   
082B            449   State2:
082B 120593     450       LCALL Power20 ; Set Power to 20%
082E 753901     451       MOV Timer_State, #0x01
0831 20840E     452       JB START_BUTTON, Quit2 ; Go to Quit2 If Start Button is NOT Pressed
0834 1207AA     453            LCALL Wait30ms
0837 208408     454            JB START_BUTTON, Quit2
083A            455   
083A 3084FD     456            JNB START_BUTTON, $ ; Go to State3 If Start Button is Pressed
083D 753900     457       MOV Timer_State, #0x00
0840 D203       458            setb Speaker_En_Flag
0842            459   Quit2:
0842 22         460            RET
0843            461   
0843            462   State3:
0843 120590     463       LCALL Power100 ; Set Power to 100%
0846 753900     464       MOV Timer_State, #0x00
0849            465   
0849 A93F       466            MOV R1, TEMP_REFLOW
084B 120558     467            LCALL Check_Temp_Oven
084E 20010D     468            JB Below_Temp_Flag, Quit3
0851            469            
0851            470            ;CLR Below_Temp_Flag    
0851 753901     471       MOV Timer_State, #0x01
0854 753600     472            MOV BCD_Counter, #0x00
0857 753807     473            MOV Resulting_Counter, #0x07
085A 0530       474            INC STATE_NUM
085C D203       475            setb Speaker_En_Flag
085E            476   Quit3:
085E 22         477            RET
085F            478   
085F            479   State4:
085F 120593     480       LCALL Power20
0862 753901     481       MOV Timer_State, #0x01
0865            482       ;JB START_BUTTON, Quit4 ; if START BUTTON is NOT PRESSED
0865            483            ;LCALL Wait30ms
0865            484            ;JB START_BUTTON, Quit4
0865            485   
0865            486            ;JNB START_BUTTON, $ ; if START BUTTON is PRESSED go to State1
0865            487            ;MOV BCD_Counter, #0x00
0865            488   Quit4:
0865 22         489            RET
0866            490   
0866            491   State5:
0866 12058D     492       LCALL Power0
0869 753900     493       MOV Timer_State, #0x00
086C            494   
086C 793C       495            MOV R1, #TEMP_DONE
086E 120558     496            LCALL Check_Temp_Oven ; Check If Oven Temperature Reaches 60
0871 30010A     497            JNB Below_Temp_Flag, Quit5  ; IF temperature >= 60, continue in state 5 (0 is above value)
0874            498   
0874 C201       499            CLR Below_Temp_Flag
0876 753000     500            MOV STATE_NUM, #0x00
0879 753600     501            MOV BCD_Counter, #0x00
087C D203       502            setb Speaker_En_Flag
087E            503   Quit5:
087E 22         504            RET
087F            505   
087F            506   ;----------------;
087F            507   ; Initialization ;
087F            508   ;----------------;
087F            509   Init_All:
087F 75AC00     510            MOV     P3M1, #0X00
0882 75AD00     511            MOV     P3M2, #0X00
0885            512   
0885 75B300     513            MOV     P1M1, #0X00
0888 75B400     514            MOV     P1M2, #0X00
088B            515   
088B 75B100     516            MOV     P0M1, #0X00
088E 75B200     517            MOV     P0M2, #0X00
0891            518   
0891 C0E0       519            push acc
0893 7401       519            mov a, #1
0895 14         519            dec a
0896 1200C7     519            lcall ?Set_Cursor_1 ; Select column and row
0899 D0E0       519            pop acc
089B C083       520            push dph
089D C082       520            push dpl
089F C0E0       520            push acc
08A1 900603     520            mov dptr, #Initial_Message1
08A4 1200BA     520            lcall ?Send_Constant_String
08A7 D0E0       520            pop acc
08A9 D082       520            pop dpl
08AB D083       520            pop dph
08AD C0E0       521            push acc
08AF 7401       521            mov a, #1
08B1 14         521            dec a
08B2 1200C5     521            lcall ?Set_Cursor_2 ; Select column and row
08B5 D0E0       521            pop acc
08B7 C083       522            push dph
08B9 C082       522            push dpl
08BB C0E0       522            push acc
08BD 900614     522            mov dptr, #Initial_Message2
08C0 1200BA     522            lcall ?Send_Constant_String
08C3 D0E0       522            pop acc
08C5 D082       522            pop dpl
08C7 D083       522            pop dph
08C9            523   
08C9 1206F8     524            LCALL Init_Vars
08CC            525   Init_SerialPort:
08CC            526       ; Configure Serial Port and Baud Rate
08CC            527   
08CC            528       ; Since Reset Button Bounces, Wait a Bit Before Sending Messages.
08CC            529       ; Otherwise, We Risk Sending Garbage to the Serial Port.
08CC 79C8       530       MOV R1, #200
08CE 7868       531       MOV R0, #104
08D0 D8FE       532       DJNZ R0, $ ; 4 Cycles-> 4 * 60.285 ns * 104 = 25 us
08D2 D9FA       533       DJNZ R1, $-4 ; 25us * 200 = 5 ms
08D4            534   
08D4            535   Timer0_Init:
08D4 438E08     536            ORL CKCON, #0B0000_1000 ; Input for Timer 0 is SYSCLK/1.
08D7            537   
08D7 E589       538            MOV A, TMOD
08D9 54F0       539            ANL A, #0XF0 ; 1111_0000 Clear Bits for Timer 0
08DB 4401       540            ORL A, #0X01 ; 0000_0001 Configure Timer 0 as 16-Timer
08DD F589       541            MOV TMOD, A
08DF            542   
08DF 758CF0     543            MOV TH0, #HIGH(TIMER0_RELOAD)
08E2 758A2C     544            MOV TL0, #LOW(TIMER0_RELOAD)
08E5            545   
08E5            546            ; Enable Timer and Interrupts
08E5 D2A9       547       SETB ET0  ; Enable Timer 0 Interrupt
08E7 D28C       548            setb TR0  ; Start Timer 0
08E9            549   Init_Timer1:
08E9 438E10     550            ORL     CKCON, #0X10 ; CLK is Input for Timer 1.
08EC 438780     551            ORL     PCON, #0X80 ; Bit SMOD = 1, Double Baud Rate
08EF 759852     552            MOV     SCON, #0X52
08F2 53C4DF     553            ANL     T3CON, #0B1101_1111
08F5 53890F     554            ANL     TMOD, #0X0F ; Clear Configuration Bits for Timer 1
08F8 438920     555            ORL     TMOD, #0X20 ; Timer 1 Mode 2
08FB 758DF7     556            MOV     TH1, #TIMER1_RELOAD ; TH1 = TIMER1_RELOAD;
08FE D28E       557            SETB TR1
0900            558   Init_ADC:
0900            559            ; Initialize the pins used by the ADC (P1.1, P1.7, P3.0) as Analog Inputs
0900 43B382     560            ORL     P1M1, #0B1000_0010
0903 53B47D     561            ANL     P1M2, #0B0111_1101
0906 43AC02     562            ORL     P3M1, #0B0000_0010
0909 53ADFD     563            ANL P3M2, #0B1111_1101
090C            564   
090C            565            ; AINDIDS Select if Some Pins are Analog Inputs or Digital I/O
090C 75F600     566            MOV AINDIDS, #0X00 ; Disable All Analog Inputs
090F 43F683     567            ORL AINDIDS, #0B1000_0011 ; Activate AIN0, AIN1, AIN7
0912            568   
0912 43E101     569            ORL ADCCON1, #0X01 ; Enable ADC
0915            570   Init_Timer2:
0915 75C800     571            MOV T2CON, #0 ; Stop Timer. Autoreload Mode.
0918 75CDBF     572            MOV TH2, #HIGH(TIMER2_RELOAD)
091B 75CC28     573            MOV TL2, #LOW(TIMER2_RELOAD)
091E            574   
091E            575            ; Set Reload Value
091E 43C980     576            ORL T2MOD, #0X80 ; Enable Timer 2 Autoreload Mode
0921 75CBBF     577            MOV RCMP2H, #HIGH(TIMER2_RELOAD)
0924 75CA28     578            MOV RCMP2L, #LOW(TIMER2_RELOAD)
0927            579   
0927            580            ; Init 1ms Interrupt Counter. 16-bit Variable with Two 8-bit Parts.
0927 E4         581            CLR A
0928 F531       582            MOV Count1ms+0, A
092A F532       583            MOV Count1ms+1, A
092C            584   
092C            585            ; Enable the Timer and Interrupts.
092C 439B80     586            ORL EIE, #0X80 ; Enable Timer 2 Interrupt ET2=1
092F D2CA       587       SETB TR2  ; Enable Timer 2
0931 22         588       RET
0932            589   
0932            590   Main:
0932            591            ; Initialization
0932 75817F     592            MOV SP, #0X7F
0935 D2AF       593       SETB EA   ; Enable Global interrupts
0937 12087F     594            LCALL Init_All
093A 120087     595            LCALL LCD_4BIT
093D            596   Forever:
093D 120548     597            LCALL Get_and_Transmit_Temp
0940 12066B     598            LCALL Display_LCDTest
0943            599            ;LCALL Display_LCD
0943 1207B7     600            LCALL StateChanges
0946            601   
0946 02093D     602            LJMP Forever
0949            603   
0949            604   EN
